#ifndef _RGB_MATRIX
#define _RGB_MATRIX

#include <inttypes.h>
#include <arduino.h>
#include <SPI.h>

#define RED    0x01
#define GREEN  0x02
#define BLUE   0x04

#define MULTIPLY 0x01
#define COVER    0x02

#define TOP_LAYER 0x00

#define UP    0x01
#define DOWN  0x02
#define LEFT  0x03
#define RIGHT 0x04

#define NO_ROT 0x0
#define ANTI_90 0x1

#define NO_ADD_DOT 0x0
#define ADD_DOT 0x1

#define MAX_LAYER 16

struct screens_buffer
{
    uint8_t index;
    uint8_t is_heap;
    screens_buffer *next;
    uint8_t *buffer;
};

class rgb_matrix
{
  private:

    uint8_t data_pin;
    uint8_t clk_pin;
    uint8_t latch_pin;
    uint8_t hw_spi;
    
    uint8_t dirty;
    
    uint8_t sum_layer;
    uint8_t* buffer;
    struct screens_buffer* top_layer;
    struct screens_buffer* layer[16];

    uint16_t max_x;
    uint16_t max_y;
    uint16_t single_color_buffer_size;

    uint16_t cursor_x;
    uint16_t cursor_y;
    
    uint16_t param[16];
    uint8_t  param_num;
    
  public:
    rgb_matrix(uint8_t x8, uint8_t y8,uint8_t _data_pin, uint8_t _clk_pin,uint8_t _latch_pin);
    int put_byte(uint16_t x,uint16_t y, uint8_t data, uint8_t mode, uint8_t color);
    int put_byte(uint16_t x,uint16_t y, uint8_t data, uint8_t mode, uint8_t color, uint8_t index);
    int put_char(uint16_t x,uint16_t y, uint8_t asc, uint8_t rotation, uint8_t mode, uint8_t color);
    int put_char(uint16_t x,uint16_t y, uint8_t asc, uint8_t rotation, uint8_t mode, uint8_t color, uint8_t index);
    
    int plot(int16_t x, int16_t y);  //point
    int plot(int16_t x0,int16_t y0,int16_t x1,int16_t y1,uint8_t add_dot);  //line
    int plot(int16_t x0,int16_t x1,int16_t y[],uint8_t add_dot); //function
    int ellipse(int16_t x, int16_t y, int16_t a, int16_t b);   //ellipse
    int rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1); //rectangle
    
    int plot(int16_t x, int16_t y, uint8_t color, uint8_t index);  //point
    int plot(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t add_dot, uint8_t color, uint8_t index);  //line
    int plot(int16_t x0, int16_t x1, int16_t y[], uint8_t add_dot,uint8_t color, uint8_t index); //function
    int ellipse(int16_t x, int16_t y, int16_t a, int16_t b,uint8_t color, uint8_t index);  //ellipse
    int rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t color, uint8_t index);  //rectangle
    int  add_layer();
    int  add_layer(uint8_t*);
    int  remove_layer();
    int  remove_layer(uint8_t index);
    
    int  set_cur(uint16_t,uint16_t);
    int  set_cur(uint8_t);
    
    int  print(uint16_t data, uint8_t rotation);
    int  print(const char p[], uint8_t rotation);        //string
    
    int put_pic(int16_t x, int16_t y, uint8_t size_x, uint8_t size_y, const char p[], uint8_t mode,uint8_t color,uint8_t index);
    int put_HZ(int16_t x, int16_t y,  const char p[], uint8_t mode,uint8_t color,uint8_t index);
    int put_HZ(int16_t x, int16_t y,  const char p[]);

    int  print(uint16_t data, uint8_t rotation, uint8_t mode,uint8_t color,uint8_t index);
    int  print(const char p[], uint8_t rotation, uint8_t mode,uint8_t color,uint8_t index);        //string

    void sync(void);
    void debug(void);
    int  rainbow(uint8_t index);
    void display(void (*display_hook)());
    int clear(void);
    int clear(uint8_t index);
    int clear(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t index);
    
    int move(uint8_t direction, uint16_t step, uint8_t index);
    int move(int16_t x0,int16_t y0,int16_t x1, int16_t y1, uint8_t index);
    int move(int16_t x0,int16_t x1,int16_t y[],uint8_t index);
    int move(uint16_t x0,uint16_t y0, uint16_t x1, uint16_t y1, uint8_t direction, uint16_t step, uint8_t index);
    int stop(uint8_t index);
    
    int at_cmd(uint8_t *p);
    void get_param(uint8_t *p,uint16_t* param,uint8_t *param_num);
};

const unsigned char ASCII[95][5]=
{
{0x00,0x00,0x00,0x00,0x00},//¿Õ0   
{0x00,0x00,0xfa,0x00,0x00},//!     
{0x00,0xe0,0x00,0xe0,0x00},//"     
{0x28,0xfe,0x28,0xfe,0x28},//#     
{0x24,0x54,0xfe,0x54,0x48},//$     
{0xc4,0xc8,0x10,0x26,0x46},//%     
{0x6c,0x92,0x6a,0x04,0x0a},//&     
{0x00,0x10,0xe0,0xc0,0x00},//'     
{0x00,0x38,0x44,0x82,0x00},//(     
{0x00,0x82,0x44,0x38,0x00},//)     
{0x24,0x18,0x7e,0x18,0x24},//*     
{0x10,0x10,0x7c,0x10,0x10},//+     
{0x00,0x01,0x0e,0x0c,0x00},//,     
{0x10,0x10,0x10,0x10,0x10},//-     
{0x00,0x00,0x06,0x06,0x00},//.     
{0x04,0x08,0x10,0x20,0x40},///     
{0x7c,0x82,0x92,0x82,0x7c},//0  16 
{0x00,0x42,0xfe,0x02,0x00},//1     
{0x4e,0x92,0x92,0x92,0x62},//2     
{0x84,0x82,0x92,0xb2,0x4c},//3     
{0x18,0x28,0x48,0xfe,0x08},//4     
{0xe4,0xa2,0xa2,0xa2,0x1c},//5     
{0x3c,0x52,0x92,0x92,0x8c},//6     
{0x82,0x84,0x88,0x90,0xe0},//7     
{0x6c,0x92,0x92,0x92,0x6c},//8     
{0x62,0x92,0x92,0x94,0x68},//9     
{0x00,0x00,0x28,0x00,0x00},//:     
{0x00,0x02,0x2c,0x00,0x00},//;     
{0x00,0x10,0x28,0x44,0x82},//<     
{0x28,0x28,0x28,0x28,0x28},//=     
{0x00,0x82,0x44,0x28,0x10},//>     
{0x40,0x80,0x9a,0x90,0x60},//?     
{0x7c,0x82,0xba,0x9a,0x72},//@     
{0x3e,0x48,0x88,0x48,0x3e},//A   33
{0xfe,0x92,0x92,0x92,0x6c},//B     
{0x7c,0x82,0x82,0x82,0x44},//C     
{0xfe,0x82,0x82,0x82,0x7c},//D     
{0xfe,0x92,0x92,0x92,0x82},//E     
{0xfe,0x90,0x90,0x90,0x80},//F     
{0x7c,0x82,0x82,0x8a,0xce},//G     
{0xfe,0x10,0x10,0x10,0xfe},//H     
{0x00,0x82,0xfe,0x82,0x00},//I     
{0x04,0x02,0x82,0xfc,0x80},//J     
{0xfe,0x10,0x28,0x44,0x82},//K     
{0xfe,0x02,0x02,0x02,0x02},//L     
{0xfe,0x40,0x38,0x40,0xfe},//M     
{0xfe,0x20,0x10,0x08,0xfe},//N     
{0x7c,0x82,0x82,0x82,0x7c},//O     
{0xfe,0x90,0x90,0x90,0x60},//P     
{0x7c,0x82,0x8a,0x84,0x7a},//Q     
{0xfe,0x90,0x98,0x94,0x62},//R     
{0x64,0x92,0x92,0x92,0x4c},//S     
{0xc0,0x80,0xfe,0x80,0xc0},//T     
{0xfc,0x02,0x02,0x02,0xfc},//U     
{0xf8,0x04,0x02,0x04,0xf8},//V     
{0xfc,0x02,0x1c,0x02,0xfc},//W     
{0xc6,0x28,0x10,0x28,0xc6},//X     
{0xc0,0x20,0x1e,0x20,0xc0},//Y     
{0x86,0x9a,0x92,0xb2,0xc2},//Z  58 
{0x00,0xfe,0x82,0x82,0x82},//[     
{0x40,0x20,0x10,0x08,0x04},//"\"   
{0x00,0x82,0x82,0x82,0xfe},//]     
{0x20,0x40,0x80,0x40,0x20},//^     
{0x02,0x02,0x02,0x02,0x62},//_     
{0x00,0xc0,0xe0,0x10,0x00},//¡¢    
{0x04,0x2a,0x2a,0x1e,0x02},//a  65 
{0xfe,0x14,0x22,0x22,0x1c},//b     
{0x1c,0x22,0x22,0x22,0x14},//c     
{0x1c,0x22,0x22,0x14,0xfe},//d     
{0x1c,0x2a,0x2a,0x2a,0x18},//e     
{0x00,0x10,0x7e,0x90,0x40},//f     
{0x1c,0x25,0x25,0x39,0x1e},//g     
{0xfe,0x10,0x20,0x20,0x1e},//h     
{0x00,0x22,0xbe,0x02,0x00},//i     
{0x04,0x02,0x02,0xbc,0x00},//j     
{0xfe,0x08,0x14,0x22,0x00},//k     
{0x00,0x82,0xfe,0x02,0x00},//l     
{0x3e,0x20,0x1e,0x20,0x1e},//m     
{0x3e,0x10,0x20,0x20,0x1e},//n     
{0x1c,0x22,0x22,0x22,0x1c},//o     
{0x3f,0x18,0x24,0x24,0x18},//p     
{0x18,0x24,0x24,0x18,0x3f},//q     
{0x3e,0x10,0x20,0x20,0x10},//r     
{0x12,0x2a,0x2a,0x2a,0x24},//s     
{0x20,0x20,0xfc,0x22,0x24},//t     
{0x3c,0x02,0x02,0x04,0x3e},//u     
{0x38,0x04,0x02,0x04,0x38},//v     
{0x3c,0x02,0x04,0x02,0x3c},//w     
{0x22,0x14,0x08,0x14,0x22},//x     
{0x32,0x09,0x09,0x09,0x3e},//y     
{0x22,0x26,0x2a,0x32,0x22},//z  90 
{0x00,0x10,0x6c,0x82,0x00},//{     
{0x00,0x00,0xee,0x00,0x00},//|     
{0x00,0x82,0x6c,0x10,0x00},//}     
{0x40,0x80,0x40,0x20,0x40} //~     
};
#endif

