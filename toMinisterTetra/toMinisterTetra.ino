#include <QuadDisplay.h>
// даём имена для пинов с пьезопищалкой (англ. buzzer) и фото-
// резистором (англ. Light Dependent Resistor или просто LDR)
#define BUZZER_PIN  X4
#define LDR_PIN     A4
#define DISPLAY_PIN         Y4

unsigned long time;
void setup()
{
  // пин с пьезопищалкой — выход...
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(Z2A, OUTPUT);
  pinMode(Z4, OUTPUT);


  // ...а все остальные пины являются входами изначально,
  // всякий раз при подаче питания или сбросе микроконтроллера.
  // Поэтому, на самом деле, нам совершенно необязательно
  // настраивать LDR_PIN в режим входа: он и так им является
}

void loop()
{
  int val, frequency;

  // считываем уровень освещённости также, как для
  // потенциометра: в виде значения от 0 до 1023.
  val = analogRead(LDR_PIN);
  analogWrite(Z2A, map(val,0,1023,0,10));

  // рассчитываем частоту звучания пищалки в герцах (ноту),
  // используя функцию проекции (англ. map). Она отображает
  // значение из одного диапазона на другой, строя пропорцию.
  // В нашем случае [0; 1023] -> [3500; 4500]. Так мы получим
  // частоту от 3,5 до 4,5 кГц.
  frequency = map(val, 0, 1023, 100, 5500);

  if (millis() - time > 100) {
    displayInt(DISPLAY_PIN, frequency);
    time = millis();
  }

  // заставляем пин с пищалкой «вибрировать», т.е. звучать
  // (англ. tone) на заданной частоте 20 миллисекунд. При
  // cледующих проходах loop, tone будет вызван снова и снова,
  // и на деле мы услышим непрерывный звук тональностью, которая
  // зависит от количества света, попадающего на фоторезистор

  if (!digitalRead(Y2))
    tone(BUZZER_PIN, frequency, 50);
}

